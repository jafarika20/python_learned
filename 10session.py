"""
در اینجا ما
یاد میگیریم که تابع هایی که دو یا چند پارامتر به عنوان ورودی میگیرند را 
که فقط یک عملیات روی ان انجام میشود به وسیله 
لامبدا بنویسیم تا سریع تر باشیم
و از مزیت های لامبدا بهره بگیریم
"""
def add(a,b):
    return a+b
print(add(50,60)) 

print("همان تابع با لمبدا")  
adder=lambda a,b:a+b#----->توجه که این کد ریترن نداره
print(adder(50,60))

print("یک مثال دیگر از لامبدا")
pow_=lambda a,b:a**b#----->توجه که این کد ریترن نداره
print(pow_(10,5))
print('-'*30)

#-----------------------------------------
"""
مبحث بعدی بحث هندل کردن ارور ها 
به وسیله ترای  اکسپت میباشد
و در اخر هم فاینالی
(این کار مزایای قابل توجهی دارد اما درواقع سرعت رو قربانی کیفیت میکنیم )
"""
import random 
divide=lambda a,b:a/b
try:
    m=int(input("Enter a --->(a/b)"))
    n=int(input("Enter b --->(a/b)"))
    print (round(divide(m,n),2))
except ZeroDivisionError:
    print("تقسیم بر صفر ممکن نیست")
except ValueError:
    print("Enter the True number")
else:#------->در اینجا شرط نیست و به معنای این است که هیچ اروری نداشته و با ایلس شرطی فرق دارد
    print("موفق امیز بود")    
    #نکته باید قبل از فاینالی ایلس بیاید
finally:#یکی از کاربرد های مهم هنگام کار با فایل است که باید بگوییم در هر صورت ببندش
    print('-'*30)

"""بحث بعدی کارکردن با فایل ها میباشد
قابل توجه است که توابع داخلی برای این عمل در نظر گرفته شده است 
و نیازی به فراخوانی ندارد
"""
#در جلسه جداگانه توضیح داده شد
