#:ایا با توجه به اضلاع ما یک مثلث داریم یا خیر

a=int(input("Enter the number :a"))
b=int(input("Enter the number :b"))
c=int(input("Enter the number :c"))
if a<b+c and b<a+c and c<a+b :
    print("مثلث میباشد")
else:
    print("مثلث نمیباشد")
"""___________________________________________________"""
#:شروع لیست []

student1=[]
print(type(student1))
#در لیست های پایتون میتوان انواع مختلفی از داده های مختلف را قرار داد میتوان همان مفاهیم ارایه را برقرار کرد اما با این نکته که میتواند دیتای ان متفاوت باشد
student2=['karo','jafari',18,False]
print('first name:',student2[0])
print('last name:',student2[1])
print('age:',student2[-2])
print('left hand:',student2[-1])#نکته مهم در زبان پایتون داشتن اندیس منفی است
#منفی یک اخرین عنصر 
#صفر اولین عنصر
"""________________________________________________"""
#عمل اسلایسینگ یا برش دادن در یک لیست :
#نکته عناصر داخل یک لیست میتواند تکراری باشد
a=[1,3,45,6,3,64,76,5,8,7,45,7,1]
"""میخواهیم از 45 تا 45 لیست را مشاهده کنیم"""
print(a[2:11])#نکته این است که در خانه 10 قرار دارد اما همیشه استپ یکی کمتر است در نتیجه 11
print(a[2:-2])# همان نگته بالا میباشد یکی بیشتر خودش در منفی سه هست پس ما منفی دو
#به طور کلی[start : stop+1 : step]
#اگر هیچی ننویسیم یعنی از اول تا اخر
#اگر هیچی در هیچکدام ننویسیم از اول تا اخر
"""_____________________________________________"""
#لیست های تو در تو
sir=[1,2,1,2,[54,15,4,8,[84,5,8]]]
#میخواهیم به عدد 4 دسترسی پیدا کنیم
print(sir[4][2])
#نحوه شماره گذاری به همان ترتیب میباشد منتها اگر به یک لیست برسیم ادرس کل لیست ان عدد است
"""_____________________________________________"""

""":متد ها ی لیست در پایتون"""
#کل قابلیت های ان فقط با یک (.)قابل نمایش است


sir.append(15)#اضافه کردن عنصر به اخر ماننده مفهوم صف 
print(sir)
b=sir.copy()#این مفهوم برای کپی کردن یک لیست میباشد
print(b)
print(sir.count(45))#برای شمارش یک عنصر
sir.extend(b)
print(a.reverse())#عکس میشود معادل sir[ : :-1]
print(sir.index(15))#پیدا کردن اولین ادرس عدد اشاره شده
sir.insert(1,4)#اگر هیچی ننویسیم همان اپند میشود
print(sir)
sir.pop(3)#بر اساس ایندکس حذف میکند و میتوان از ایندکس منفی استفاده کرد اگر هیچی ننویسید اخرین عنصر
print(sir)
sir.remove(15)#براساس مقدار حذف میکند
print(sir)
sir.clear()#هیچ ورودی ندارد 
print(sir)
"""_________________________________________________"""
#چند تا از توابع داخلی پایتون:
print()
print(max(1,2,1,8,9,4,6))
print(min(1,2,1,8,9,4,6))
print(len("algoritm is an art"))
print(type(5))
#range() که در حلقه ها استفاده میشود
int(19.5)
float(19)
str(19.5)
sum(sir)
sorted([1,9,8,6,1,7,5,6])
#برای تغیر دادن یک ویزگی کلی در همه عبارت های یک مجموعه میباشد
nums=[1,2,3]
new_nums=list(map(lambda x: x*2,nums))
print(new_nums)
#برای حذف کردن اعضا با یک ویزگی خاص
evens= list(filter(lambda x:x%2==0,nums))
print(evens)
#وقتی در یک حلقه هم پیمایش میکنید هم میخواهید شماره گزاری کنید ان را
fruits=['apple','banana','cherry']
for index , fruits in enumerate(fruits,start=0):
    print(index,fruits)
#ایتم های دو مجموعه را با هم ادغام میکند
names=['Ali','karo','Ahmad']
score=[12,18,16]
for name,score in zip(names,score):
    print(name,score)
#برسی ذرست بودن یا نبودن یک شرط در کل یک مجموعه
print(all(x>0 for x in nums))
#حداقل یکی از ان شرت در مجموعه برقرار باشد
print(any(i>10 for i in nums))
#تابع قدر مطلق
print(abs(-18))
#رند کردن عدد با مقدار دلخواه
print(round(19.56454 , 1))
#تابع توان با سرعت بیشتر به جای 2**3
print(pow(2,3))#اگر یک (,) دیگر بگذاریم مود ان عبارت توان دار را نیز محاسبه میکند
#_______________________________________-
#مانند پاو که در بالا گفته شد برای باقیمانده وقسمت صحیح نیز تابع اماده و بهینه تر است
print(divmod(10,3))#ابتدا قسمت صحیح و سپس باقیمانده تقسیم را میدهد
# دقیقا همان فهمیدن نوع(تایپ)اما برسی کردن و کاربرد در مفاهیم ارث بری
x=5
print(isinstance(x,int))
#استفاده از تابعی که البته امنیت خیلی کمی دارد ولی برای محاسبات ساده خیلی کاربرد دارد
print(eval("2*64+595-9456"))

""" اکیدا توصیه میگردد فقط برای تست استفاده کنید و 
در پروزه های واقعی استفاده نگردد زیرا کاربر میتواند هرچیزی به کد شما اضافه کند و
 اصطلاحا به برنامه نفوظ کند"""
 # باید در عمل از کتابخانه امن ای اس تی استفاده کرد(ast)

"""

 استفاده از توابع داخلی به دلیل استفاده از ساختار های 
 بهینه تر و ساختمان داده بهینه تر کارایی را بالا میبرد
 و همچنین سرعت و امنیت بالاتری برخوردار میباشد معمولا
"""